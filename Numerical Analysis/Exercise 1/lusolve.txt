function x = lusolve(A, b)
% Description: Solves Ax = b using the LU decomposition
% Input:
%   - A: the coefficient matrix
%   - b: the right-hand side values
% Output: 
%   - x: the solution vector
% Author: Nikos Ploskas
	[m, n] = size(A);
	if m ~= n
		error('Matrix A must be square!');
	end
	n1 = length(b);
	if n1 ~= n
		error('Vector b should be equal to the number of rows and columns of A!');
	end
	
	[L, U] = luDecomposition(A);
	y = downTrig(L, b);
	x = upTrig(U, y);


function [L, U] = luDecomposition(A)
% Description: LU decomposition of A
% Input: 
%   - A: the coefficient matrix
% Output: 
%   - L: the lower triangular matrix
%   - U: the upper triangular matrix
% Author: Nikos Ploskas
	[m, n] = size(A);
	L = zeros(n, n);
	U = zeros(n, n);
	
	for i = 1:n
		L(i, i) = 1;
	end
	
	for k = 1:n - 1
		for i = k + 1:n
			mult = A(i, k) / A(k, k);
			for j = k + 1:n
				A(i, j) = A(i, j) - A(k, j) * mult;
			end
			L(i, k) = mult;
		end
	end
	
	for i = 1:n
		for j = i:n
			U(i, j) = A(i, j);
		end
	end
end

function x = downTrig(L, b)
% Description: Solves Lx = b
% Input: 
%   - L: the lower triangular matrix
%   - b: the right-hand side values
% Output: 
%   - x: the solution vector
% Author: Nikos Ploskas
	[m, n] = size(L);
	x = zeros(n, 1);
	x(1) = b(1) / L(1, 1);
	for k = 2:n
		x(k) = b(k);
		for j = 1:k - 1
			x(k) = x(k) - L(k, j) * x(j);
		end
		x(k) = x(k) / L(k, k);
	end
end

function x = upTrig(U, b)
% Description: Solves Ux = b
% Input: 
%   - U: the upper triangular matrix
%   - b: the right-hand side values
% Output: 
%   - x: the solution vector
% Author: Nikos Ploskas
	[m, n] = size(U);
	x = zeros(n, 1);
	x(n) = b(n) / U(n, n);
	for k = 1:n - 1
		x(n - k) = b(n - k);
		for j = n - k + 1:n
			x(n - k) = x(n - k) - U(n - k, j) * x(j);
		end
		x(n - k) = x(n - k) / U(n - k, n - k);
	end
end

end